import io
import tempfile
from datetime import datetime

import numpy as np
import matplotlib.pyplot as plt
from aiogram.types import FSInputFile
from aiogram import types
from aiogram import Dispatcher, types
from aiogram.filters import Command

from funding_fetcher import get_all_funding, get_history_all
from utils import calc_max_spread, normalize_funding_data


async def start_cmd(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Funding-Stats-Bot.\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–¥—Ä–æ–±–Ω–æ):\n\n"
        "1) /funding <symbol>\n"
        "   ‚Äî –¢–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –±–∏—Ä–∂–∞–º\n"
        "   ‚Äî –í—ã–≤–æ–¥–∏—Ç: –±–∏—Ä–∂–∞, funding_rate (–≤ % —Å 6 –∑–Ω–∞–∫–∞–º–∏), –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏.\n"
        "   –ü—Ä–∏–º–µ—Ä: /funding BTCUSDT\n\n"
        "2) /funding_spread_chart <exchange> <days> <symbol>\n"
        "   ‚Äî –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—É–º–º—ã (cumulative) funding rate –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <days> –¥–Ω–µ–π.\n"
        "   ‚Äî –¢–∞–∫–∂–µ —Ç–∞–±–ª–∏—Ü–∞/—Å–ø–∏—Å–æ–∫ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ funding_rate (–±–µ–∑ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è).\n"
        "   –§–æ—Ä–º–∞—Ç: /funding_spread_chart BYBIT 7 BTCUSDT\n"
        "   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <exchange> ‚Äî –∫–æ–¥ –±–∏—Ä–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BINANCE, BYBIT).\n\n"
        "3) /top_tokens_chart <exchange> <days> <symbol1,symbol2,...>\n"
        "   ‚Äî –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ç—Ä–æ–∏—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ funding rate (–∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –∏—Ç–æ–≥–æ–≤–æ–π –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ.\n"
        "   ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PNG —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¢–û–ü (—Å–∏–º–≤–æ–ª—ã + –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è).\n"
        "   –ü—Ä–∏–º–µ—Ä: /top_tokens_chart BYBIT 3 BTCUSDT,ETHUSDT,SOLUSDT\n\n"
        "–í–ê–ñ–ù–´–ï –ú–ï–õ–û–ß–ò / –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "- –£–∫–∞–∑—ã–≤–∞–π —Å–∏–º–≤–æ–ª—ã –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º –≤–∏–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT, SOLUSDT.\n"
        "- –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏—Ä–∂ (BYBIT, BINANCE –∏ –¥—Ä.) –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ BTC-USDT –∏–ª–∏ BTC-USDT-SWAP) ‚Äî –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å 'BTCUSDT'.\n"
        "- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–µ—Ç ‚Äî –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ \"–ù–µ –Ω–∞–π–¥–µ–Ω–æ\" –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∏–º–≤–æ–ª –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π).\n"
        "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π: BTCUSDT,ETHUSDT,SOLUSDT\n"
        "- –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS (UTC).\n\n"
    )


async def funding_cmd(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /funding
    """
    args = message.text.split()
    if len(args) < 2 or len(args) > 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: /funding BTCUSDT")

    await message.answer('–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')

    symbol = args[1].upper()
    data = await get_all_funding(symbol)
    data = normalize_funding_data(data)

    if not data:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    text = f"üìä –°—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ {symbol}:\n\n"
    for row in data:
        text += f"{row['exchange']}: {(row['funding_rate'] * 100):.2f}% (–≤—Ä–µ–º—è {row['next_funding_time']})\n"

    spread, pair = calc_max_spread(data)
    text += f"\nüî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {(spread * 100):.3f}% ({pair[0]} ‚Üî {pair[1]})"

    await message.answer(text)


async def funding_spread_chart_cmd(message: types.Message):
    """
    /funding_spread_chart <exchange> <days> <symbol>
    –ü—Ä–∏–º–µ—Ä: /funding_spread_chart OKX 7 BTCUSDT
    """
    args = message.text.split()
    if len(args) < 4 or len(args) > 4:
        return await message.answer("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /funding_spread_chart OKX 7 BTCUSDT")
    
    await message.answer('–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')

    exchange = args[1].upper()
    days = int(args[2])
    symbol = args[3].upper()

    history = await get_history_all(symbol, days)
    if not history:
        return await message.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    rates = [h for h in history if h["exchange"] == exchange]
    rates.sort(key=lambda x: x["funding_time"])

    times = [datetime.utcfromtimestamp(h["funding_time"]/1000) for h in rates]
    funding_rates = [(h["funding_rate"] * 100) * 100 for h in rates]  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    cum_rates = np.cumsum(funding_rates)

    total = round(np.sum(funding_rates), 2)
    mean = round(np.mean(funding_rates), 2)
    max_rate = round(np.max(funding_rates), 2)
    min_rate = round(np.min(funding_rates), 2)

    plt.figure(figsize=(10, 5))
    plt.plot(times, cum_rates, label=f"Cumulative Funding Rate {exchange}")
    plt.title(
        f"Cumulative Funding Rate {symbol} ({exchange})\n"
        f"Total: {total}% | Mean(average): {mean}% | Max: {max_rate}% | Min: {min_rate}%"
    )
    plt.xlabel("Time")
    plt.ylabel("Cumulative %")
    plt.legend()
    plt.grid(True)

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
        tmp.write(buf.getbuffer())
        tmp_path = tmp.name

    await message.answer_photo(FSInputFile(tmp_path))


async def top_tokens_chart_cmd(message: types.Message):
    """
    /top_tokens_chart  <exchange> <days> <tokens>
    –ü—Ä–∏–º–µ—Ä:
    /top_tokens_chart  OKX 3 BTCUSDT,ETHUSDT,SOLUSDT
    """
    args = message.text.split()
    if len(args) < 4:
        return await message.answer(
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /top_tokens_chart  OKX 3 BTCUSDT,ETHUSDT,SOLUSDT"
        )

    await message.answer('–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')

    exchange = args[1].upper()
    days = int(args[2])
    raw_tokens = args[3].replace(', ', ',')
    tokens = [t.strip().upper() for t in raw_tokens.split(",") if t.strip()]

    if not tokens:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω")

    results = []  # (symbol, times[], cumsum[])

    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
    for symbol in tokens:
        history = await get_history_all(symbol, days)
        if not history:
            continue

        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∏—Ä–∂–µ
        rates = [h for h in history if h["exchange"].upper() == exchange.upper()]
        rates.sort(key=lambda x: x["funding_time"])
        if not rates:
            continue

        times = [datetime.utcfromtimestamp(h["funding_time"]/1000) for h in rates]
        funding_rates = [(h["funding_rate"] * 100) * 100 for h in rates]
        cum = np.cumsum(funding_rates)

        total = round(cum[-1], 2)
        mean = round(np.mean(funding_rates), 2)
        max_rate = round(np.max(funding_rates), 2)
        min_rate = round(np.min(funding_rates), 2)

        results.append((symbol, total, mean, max_rate, min_rate, times, cum))

    if not results:
        return await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º")

    results.sort(key=lambda x: abs(x[1]), reverse=True)

    plt.figure(figsize=(12, 6))
    for symbol, total, mean, max_rate, min_rate, times, cum in results:
        label = (
            f"{symbol} | Total:{total}% | Mean:{mean}% "
            f"| Max:{max_rate}% | Min:{min_rate}%"
        )
        plt.plot(times, cum, label=label)

    plt.title(f"TOP cumulative funding ({exchange}) - {days}d")
    plt.xlabel("Time")
    plt.ylabel("Cumulative %")
    plt.legend()
    plt.grid(True)

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
        tmp.write(buf.getbuffer())
        tmp_path = tmp.name

    await message.answer_photo(FSInputFile(tmp_path))


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º
    """
    dp.message.register(start_cmd, Command(commands=["start"]))
    dp.message.register(funding_cmd, Command(commands=["funding"]))
    dp.message.register(top_tokens_chart_cmd, Command(commands=["top_tokens_chart"]))
    dp.message.register(funding_spread_chart_cmd, Command(commands=["funding_spread_chart"]))

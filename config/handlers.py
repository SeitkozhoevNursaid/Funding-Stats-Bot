from aiogram import Dispatcher, types
from aiogram.filters import Command

from config.funding_fetcher import get_all_funding
from utils import calc_max_spread, normalize_funding_data


async def start_cmd(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç –Ø Funding-Stats-Bot!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/funding <symbol> ‚Äì —Å—Ç–∞–≤–∫–∏ –ø–æ –∞–∫—Ç–∏–≤—É\n"
        "–ü—Ä–∏–º–µ—Ä: /funding BTCUSDT"
    )


async def funding_cmd(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /funding
    """
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: /funding BTCUSDT")

    symbol = args[1].upper()
    data = await get_all_funding(symbol)
    data = normalize_funding_data(data)
    print(f"our_dataaaa    {data}")

    if not data:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    text = f"üìä –°—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ {symbol}:\n\n"
    for row in data:
        print(f'roww++++          {row}')
        text += f"{row['exchange']}: {row['funding_rate']}% (–≤—Ä–µ–º—è {row['next_funding_time']})\n"

    spread, pair = calc_max_spread(data)
    text += f"\nüî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {spread:.5f}% ({pair[0]} ‚Üî {pair[1]})"

    await message.answer(text)


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º
    """
    dp.message.register(start_cmd, Command(commands=["start"]))
    dp.message.register(funding_cmd, Command(commands=["funding"]))
